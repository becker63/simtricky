# Set the shell for commands
set shell := ["bash", "-ceu"]

# Generate Protobuf
# (Adjust paths as needed if your .proto files or output locations change)
generate_proto:
    rm -rf common/pb/*.pb.go
    protoc --proto_path=../proto \
           --go_out=./common/pb --go_opt=paths=source_relative \
           --go-grpc_out=./common/pb --go-grpc_opt=paths=source_relative \
           ../proto/*.proto

# Initialize (single-module) project
# Not strictly needed now that there's no go.work, but might do other setup tasks.
init:
    go mod tidy

# Update dependencies in the single module
update-deps:
    go get -u ./...
    go mod tidy

# Run tests for all packages
# The '|| true' is your existing approach to silence nonzero exit in Just, if desired
test:
    @GOTESTSUM_SUPPRESS_ERRORS=1 gotestsum --format=short $(go list ./...) || true

# Build binaries
# We assume each folder has a main package or an entrypoint (e.g. package main).
# If `services/agent` only has library packages, you'll need to add a main.go there or elsewhere.
build:
    go build -o bin/agent ./services/agent
    go build -o bin/orchestrator ./services/orchestrator
    go build -o bin/cli ./cli

# Clean up build artifacts
clean:
    rm -rf bin

# If you still want to see any leftover workspace config (should be empty now)
work:
    @echo "No go.work in single-module setup"
