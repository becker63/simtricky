// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: agent_listener.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Agent_Listener_Start_FullMethodName         = "/pb.Agent_Listener/Start"
	Agent_Listener_Stop_FullMethodName          = "/pb.Agent_Listener/Stop"
	Agent_Listener_ChangeConfig_FullMethodName  = "/pb.Agent_Listener/ChangeConfig"
	Agent_Listener_Create_Server_FullMethodName = "/pb.Agent_Listener/Create_Server"
)

// Agent_ListenerClient is the client API for Agent_Listener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Agent_ListenerClient interface {
	// Machine api
	Start(ctx context.Context, in *StartStopReq, opts ...grpc.CallOption) (*Status, error)
	Stop(ctx context.Context, in *StartStopReq, opts ...grpc.CallOption) (*Status, error)
	ChangeConfig(ctx context.Context, in *ChangedConfig, opts ...grpc.CallOption) (*Status, error)
	Create_Server(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Status, error)
}

type agent_ListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewAgent_ListenerClient(cc grpc.ClientConnInterface) Agent_ListenerClient {
	return &agent_ListenerClient{cc}
}

func (c *agent_ListenerClient) Start(ctx context.Context, in *StartStopReq, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, Agent_Listener_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agent_ListenerClient) Stop(ctx context.Context, in *StartStopReq, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, Agent_Listener_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agent_ListenerClient) ChangeConfig(ctx context.Context, in *ChangedConfig, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, Agent_Listener_ChangeConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agent_ListenerClient) Create_Server(ctx context.Context, in *Config, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, Agent_Listener_Create_Server_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Agent_ListenerServer is the server API for Agent_Listener service.
// All implementations must embed UnimplementedAgent_ListenerServer
// for forward compatibility.
type Agent_ListenerServer interface {
	// Machine api
	Start(context.Context, *StartStopReq) (*Status, error)
	Stop(context.Context, *StartStopReq) (*Status, error)
	ChangeConfig(context.Context, *ChangedConfig) (*Status, error)
	Create_Server(context.Context, *Config) (*Status, error)
	mustEmbedUnimplementedAgent_ListenerServer()
}

// UnimplementedAgent_ListenerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAgent_ListenerServer struct{}

func (UnimplementedAgent_ListenerServer) Start(context.Context, *StartStopReq) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedAgent_ListenerServer) Stop(context.Context, *StartStopReq) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedAgent_ListenerServer) ChangeConfig(context.Context, *ChangedConfig) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeConfig not implemented")
}
func (UnimplementedAgent_ListenerServer) Create_Server(context.Context, *Config) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create_Server not implemented")
}
func (UnimplementedAgent_ListenerServer) mustEmbedUnimplementedAgent_ListenerServer() {}
func (UnimplementedAgent_ListenerServer) testEmbeddedByValue()                        {}

// UnsafeAgent_ListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Agent_ListenerServer will
// result in compilation errors.
type UnsafeAgent_ListenerServer interface {
	mustEmbedUnimplementedAgent_ListenerServer()
}

func RegisterAgent_ListenerServer(s grpc.ServiceRegistrar, srv Agent_ListenerServer) {
	// If the following call pancis, it indicates UnimplementedAgent_ListenerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Agent_Listener_ServiceDesc, srv)
}

func _Agent_Listener_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Agent_ListenerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Listener_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Agent_ListenerServer).Start(ctx, req.(*StartStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Listener_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Agent_ListenerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Listener_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Agent_ListenerServer).Stop(ctx, req.(*StartStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Listener_ChangeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangedConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Agent_ListenerServer).ChangeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Listener_ChangeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Agent_ListenerServer).ChangeConfig(ctx, req.(*ChangedConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Listener_Create_Server_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Agent_ListenerServer).Create_Server(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Agent_Listener_Create_Server_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Agent_ListenerServer).Create_Server(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_Listener_ServiceDesc is the grpc.ServiceDesc for Agent_Listener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_Listener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Agent_Listener",
	HandlerType: (*Agent_ListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Agent_Listener_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Agent_Listener_Stop_Handler,
		},
		{
			MethodName: "ChangeConfig",
			Handler:    _Agent_Listener_ChangeConfig_Handler,
		},
		{
			MethodName: "Create_Server",
			Handler:    _Agent_Listener_Create_Server_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agent_listener.proto",
}
